knitr::opts_chunk$set(echo = TRUE)
# Enter code here
for (x in c(3, 6, 9)) {
print(x)
}
# Left-hand side code: for loop for passing values
for (x in 1:8) {print(x)}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5) print(y[x])}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])}
# Enter code here
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) { sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Example 3 for data_type=double
# Example 1 for data_type=double
sample_means <- vector("double", length = 5)
# Example 2 for data_type=double
sample_means <- double(5)
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Initialisation of data_list
data_list <- vector("list", length = 5)
# Example: bad idea!
# Vector with numbers from 7 to 11
a <- 7:11
# Vector with numbers from 8 to 12
b <- 8:12
# Vector of all zeros of length 5
out <- rep(0L, 5)
# Loop along the length of vector a
for (i in seq_along(a)) {
# Each entry of out is the sum of the corres
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
# Vector with numbers from 7 to 11
a <- 7:11
# Vector with numbers from 8 to 12
b <- 8:12
out <- a + b
out
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1
}
# Left-hand side code: for loop
for(i in 1:5){
print(i)
}
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
for (x in c(3, 6, 9)) {
print(x)
}
# Left-hand side code: for loop for passing values
for (x in 1:8) {print(x)}
# Right-hand side code: for loop for passing indices
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])}
# Enter code here
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) { sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Initialisation of data_list
data_list <- vector("list", length = 5)
# Example: bad idea!
# Vector with numbers from 7 to 11
a <- 7:11
# Vector with numbers from 8 to 12
b <- 8:12
# Vector of all zeros of length 5
out <- rep(0L, 5)
# Loop along the length of vector a
for (i in seq_along(a)) {
# Each entry of out is the sum of the corres
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
# Vector with numbers from 7 to 11
a <- 7:11
# Vector with numbers from 8 to 12
b <- 8:12
out <- a + b
out
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Left-hand side code: for loop
for(i in 1:5){
print(i)
}
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1
}
knitr::opts_chunk$set(echo = TRUE)
# Import the "playlist_data.csv" dataset into R
read_csv("playlist_data.csv")
install.packages("readr")
# Import the "playlist_data.csv" dataset into R
read_csv("playlist_data.csv")
# Load the necessary package to work with CSV files in R.
library("tidyverse")
library("readr")
# Import the "playlist_data.csv" dataset into R
read_csv("playlist_data.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("images/countdown.png")countdown <- 10
knitr::include_graphics("images/countdown.png")
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
shadowing_example <- function() {
x <- 10
cat("Inside the function: x =", x, "\\\\n")
}
x <- 5
cat("Outside the function: x =", x, "\\\\n")
shadowing_example()
setwd("~/Desktop/nus y3s1/NM2207 Computational Media Literacy/mid terms")
