# Enter code here
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
# Enter code here
say_hello_to <- function(name) {
print(paste0("Hello ", name, "!"))
}
# Enter code here
say_hello_to('Deniz')
```{r, eval=FALSE,echo=TRUE}
# Enter code here
typeof(+)
# Enter code here
typeof(sum)
# Enter code here
typeof(say_hello_to)
mean(rnorm(sample_size))}
# Enter code here
calc_sample_mean <- function(sample_size) {
mean(rnorm(sample_size))
}
# With one input
calc_sample_mean(1000)
# With vector input
calc_sample_mean(c(100, 300, 3000))
# With one input
calc_sample_mean(1000)
# With vector input
calc_sample_mean(c(100, 300, 3000))
# Enter code here
library(tidyverse)
#creating a vector to test our function
sample_tibble <- tibble(sample_sizes =
c(100, 300, 3000))
#using rowwise groups the data by row, # allowing calc_sample_mean sample_tibble %>% group_by(sample_sizes) %>% mutate(sample_means =
calc_sample_mean(sample_sizes))
#using rowwise groups the data by row,
# allowing calc_sample_mean
sample_tibble %>%
group_by(sample_sizes) %>%
mutate(sample_means =
calc_sample_mean(sample_sizes))
# First define the function
calc_sample_mean <- function(sample_size,
our_mean=0,
our_sd=1) {
sample <- rnorm(sample_size,
mean = our_mean,
sd = our_sd)
mean(sample)
}
# Call the function
calc_sample_mean(sample_size = 10)
# Enter code here
calc_sample_mean(10, our_sd = 2)
calc_sample_mean(10, our_mean = 6)
calc_sample_mean(10, 6, 2)
# set error=TRUE to see the error message in the output
# Enter code here
calc_sample_mean(our_mean = 5)
# set error=TRUE to see the error message in the output
# Enter code here
calc_sample_mean(our_mean = 5)
# Enter code here
add_two <- function(x) {
x+2
}
add_two(4)
add_two(-34)
add_two(5.784)
# Enter code here
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
foo()
# Enter code here
# Initialize z
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
foo()
# Enter code here
# Initialize z
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
# another reassignment of z
foo(z = 4)
# Accessing z outside the function
sprintf("The final value of z after reassigning it to a different value inside the function is %d")
# Enter code here
# Initialize z
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
# declare a function, notice how we pass a value of 2 for z
foo <- function(z = 2) {
# reassigning z
z <- 3
return(z+3)
}
# another reassignment of z
foo(z = 4)
# Enter code here
say_hello_to('Kashif')
say_hello_to('Zach')
say_hello_to('Deniz')
setwd("~/Desktop/nus y3s1/NM2207 Computational Media Literacy/Week-5/Challenge")
