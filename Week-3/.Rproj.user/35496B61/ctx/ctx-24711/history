setwd("~/Desktop/nus y3s1/NM2207 Computational Media Literacy/Week-3")
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
# Example a.: execute this example
x <- 'A'
x
# Complete the code for Example b and execute it
x <- "Apple"
x
# Complete the code for Example c and execute it
x <- FALSE
x
# Complete the code for Example d and execute it
x <- 5L
x
# Complete the code for Example e and execute it
x <- 5
x
# Complete the code for Example f and execute it
x <- 1i
x
# Example a.: execute this example
x <- 'A'
typeof(x)
# Complete the code for Example b and execute it
x <- "Apple"
typeof(x)
# Complete the code for Example c and execute it
x <- FALSE
typeof(x)
# Complete the code for Example d and execute it
x <- 5L
typeof(x)
# Complete the code for Example e and execute it
x <- 5
typeof(x)
# Complete the code for Example f and execute it
x <- 1i
typeof(x)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv(/Users/iannnlee/Desktop/nus y3s1/NM2207 Computational Media Literacy/Week-3/Code Along/cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv(Users/iannnlee/Desktop/nus y3s1/NM2207 Computational Media Literacy/Week-3/Code Along/cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv(cat-lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv(cat_lovers.csv)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read.csv(cat_lovers.csv)
cat_lovers <- read_csv("cat-lovers.csv")
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Get more information about the mean() command using ? operator
?mean
# Convert the variable number_of_cats using as.integer()
mean(as.integer(cat_lovers$number_of_cats))
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.integer(cat_lovers$number_of_cats)
# Empty vector
x <- vector()
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,'a')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
# Example a.: execute this example
x <- 'A'
x
# Complete the code for Example b and execute it
x <- "Apple"
x
# Complete the code for Example c and execute it
x <- FALSE
x
# Complete the code for Example d and execute it
x <- 5L
x
# Complete the code for Example e and execute it
x <- 5
x
# Complete the code for Example f and execute it
x <- 1i
x
# Example a.: execute this example
x <- 'A'
typeof(x)
# Complete the code for Example b and execute it
x <- "Apple"
typeof(x)
# Complete the code for Example c and execute it
x <- FALSE
typeof(x)
# Complete the code for Example d and execute it
x <- 5L
typeof(x)
# Complete the code for Example e and execute it
x <- 5
typeof(x)
# Complete the code for Example f and execute it
x <- 1i
typeof(x)
# import the cat-lovers data from the csv file you downloaded from canvas
cat_lovers <- read_csv("cat-lovers.csv")
# Compute the mean of the number of cats: execute this command
mean(cat_lovers$number_of_cats)
# Get more information about the mean() command using ? operator
?mean
# Convert the variable number_of_cats using as.integer()
mean(as.integer(cat_lovers$number_of_cats))
# Display the elements of the column number_of_cats
cat_lovers$number_of_cats
# Display the elements of the column number_of_cats after converting it using as.numeric()
as.integer(cat_lovers$number_of_cats)
# Empty vector
x <- vector()
# Type of the empty vector
typeof(x)
# Method 1
x<-vector("logical",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-logical(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(TRUE,FALSE,TRUE,FALSE,TRUE)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("character",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-character(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c('A','b','r','q')
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("integer",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-integer(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1,2,3,4,5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 4
x<-seq(from=1,to=5,by=0.1)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 5
x<-1:5
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 1
x<-vector("double",length=5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 2
x<-double(5)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Method 3
x<-c(1.787,0.63573,2.3890)
# Display the contents of x
print(x)
# Display the type of x
print(typeof(x))
# Create a vector
x <- c(1.8)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,'a')
# Check the type of x
typeof(x)
# Create a vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c('a')
# Check the type of x
typeof(x)
# Add a logical value to the vector
x <- c(x,TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Add a number to the vector
x <- c(x,2)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1L)
# Check the type of x
typeof(x)
# Convert the vector to type character
x <- as.character(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c('A')
# Check the type of x
typeof(x)
# Convert the vector to type double
x <- as.numeric(x)
# Check the type of x
typeof(x)
# Create a vector
x <- c(1,10,9,8,1,3,5)
# Access one element with index 3
x[3]
# Access elements with consecutive indices, 2 to 4: 2,3,4
x[2:4]
# Access elements with non-consecutive indices, 1,3,5
x[c(1,3,5)]
# Access elements using logical vector
x[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]
# Access elements using the conditional operator <
x[x<10]
# Display the length of the vector
print(length(x))
# Display the type of the vector
print(typeof(x))
# Display the structure of the vector
print(str(x))
# Initialise a named list
my_pie = list(type="key lime", diameter=7, is.vegetarian=TRUE)
# display the list
my_pie
# Print the names of the list
names(my_pie)
# Retrieve the element named type
my_pie$type
# Retrieve a truncated list
my_pie["type"]
# Retrieve the element named type
my_pie[["type"]]
# Install package
install.packages("openintro")
install.packages("tidyverse")
# Load the package
library(openintro)
# Load package
library(tidyverse)
# Catch a glimpse of the data-set: see how the rows are stacked one below another
glimpse(loans_full_schema)
# Selecting numeric variables
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
# View the columns stacked one below another
glimpse(loans)
# Selecting categoric variables
loans <- loans_full_schema %>%
select( ) # type the chosen columns as in the lecture slide
# View the columns stacked one below another
glimpse(loans)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
# Set the CRAN mirror
options(repos = c(CRAN = "https://cran.rstudio.com/"))
# Load package tidyverse
install.packages("tidyverse")
library(tidyverse)
install.packages("openintro", repos="http://cran.us.r-project.org")
